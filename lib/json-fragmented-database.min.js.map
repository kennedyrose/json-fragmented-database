{"version":3,"sources":["lib/node_modules/browser-pack/_prelude.js","lib/lib/get.js","lib/node_modules/es6-promise/dist/es6-promise.js","lib/node_modules/process/browser.js"],"names":[],"mappings":"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","file":"json-fragmented-database.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","(function (root, factory) {\n\t'use strict'\n\tif (typeof define === 'function' && define.amd) {\n\t\tdefine([], factory)\n\t}\n\telse if (typeof exports === 'object') {\n\t\tmodule.exports = factory()\n\t}\n\telse {\n\t\troot.jsonFragmentedDatabase = factory()\n\t}\n}(this, function(){\n\t'use strict'\n\tfunction getInfo(opt){\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconsole.log('Getting info...')\n\t\t\tif(opt.info) return resolve(opt)\n\t\t\tgetJson(`${opt.dir}/info.json`)\n\t\t\t\t.then(obj => {\n\t\t\t\t\topt.info = obj\n\t\t\t\t\tresolve(opt)\n\t\t\t\t})\n\t\t\t\t.catch(reject)\n\t\t})\n\t}\n\n\tfunction getData(opt){\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconsole.log('Getting data...')\n\t\t\tconst found = []\n\t\t\tlet cursor = opt.offset\n\t\t\topt.info.lastFileTotal\n\t\t\tfunction getBatch(){\n\t\t\t\tlet file\n\t\t\t\t// Find which file pointer is pointing to\n\t\t\t\tif(cursor > (opt.info.lastFile * opt.info.entriesPerFile)){\n\t\t\t\t\tfile = opt.info.lastFile\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tfile = Math.floor(opt.info.entriesPerFile / cursor)\n\t\t\t\t}\n\t\t\t\tgetJson(`${opt.dir}/${file}.json`)\n\t\t\t\t\t.then(arr => {\n\t\t\t\t\t\tlet inFileCursor = file * opt.info.entriesPerFile\n\t\t\t\t\t\tfor(let i = arr.length; i--;){\n\t\t\t\t\t\t\tif(cursor === inFileCursor){\n\t\t\t\t\t\t\t\tif(found.length < opt.limit){\n\t\t\t\t\t\t\t\t\tfound.push(arr[i])\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tcursor--\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tinFileCursor--\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(found.length < opt.limit){\n\t\t\t\t\t\t\tfile--\n\t\t\t\t\t\t\tif(file > 0){\n\t\t\t\t\t\t\t\treturn getBatch()\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresolve(found)\n\t\t\t\t\t})\n\t\t\t\t\t.catch(reject)\n\t\t\t}\n\t\t})\n\t}\n\n\n\tfunction getJson(file){\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst xhr = new XMLHttpRequest()\n\t\t\txhr.onreadystatechange = function() {\n\t\t\t\tif(xhr.responseText) console.log(xhr.responseText)\n\t\t\t\tif(this.readyState == 4 && this.status == 200){\n\t\t\t\t\tresolve(JSON.parse(xhr.responseText))\n\t\t\t\t}\n\t\t\t}\n\t\t\txhr.open('get', file, true)\n\t\t\txhr.send()\n\t\t})\n\t}\n\n\n\treturn function(opt, done){\n\t\tif(typeof opt !== 'object') opt = {}\n\t\tif(typeof opt === 'function') done = opt\n\t\topt = Object.assign({\n\t\t\tdir: 'data',\n\t\t\tlimit: 30,\n\t\t\toffset: 0\n\t\t}, opt)\n\n\t\tgetInfo(opt)\n\t\t\t.then(getData)\n\t\t\t.then(ret => {\n\t\t\t\tconsole.log('Done!')\n\t\t\t\tdone(ret)\n\t\t\t})\n\t\t\t.catch(console.error)\n\t}\n}))\n","/*!\n * @overview es6-promise - a tiny implementation of Promises/A+.\n * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)\n * @license   Licensed under MIT license\n *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE\n * @version   4.1.0\n */\n\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define(factory) :\n    (global.ES6Promise = factory());\n}(this, (function () { 'use strict';\n\nfunction objectOrFunction(x) {\n  return typeof x === 'function' || typeof x === 'object' && x !== null;\n}\n\nfunction isFunction(x) {\n  return typeof x === 'function';\n}\n\nvar _isArray = undefined;\nif (!Array.isArray) {\n  _isArray = function (x) {\n    return Object.prototype.toString.call(x) === '[object Array]';\n  };\n} else {\n  _isArray = Array.isArray;\n}\n\nvar isArray = _isArray;\n\nvar len = 0;\nvar vertxNext = undefined;\nvar customSchedulerFn = undefined;\n\nvar asap = function asap(callback, arg) {\n  queue[len] = callback;\n  queue[len + 1] = arg;\n  len += 2;\n  if (len === 2) {\n    // If len is 2, that means that we need to schedule an async flush.\n    // If additional callbacks are queued before the queue is flushed, they\n    // will be processed by this flush that we are scheduling.\n    if (customSchedulerFn) {\n      customSchedulerFn(flush);\n    } else {\n      scheduleFlush();\n    }\n  }\n};\n\nfunction setScheduler(scheduleFn) {\n  customSchedulerFn = scheduleFn;\n}\n\nfunction setAsap(asapFn) {\n  asap = asapFn;\n}\n\nvar browserWindow = typeof window !== 'undefined' ? window : undefined;\nvar browserGlobal = browserWindow || {};\nvar BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;\nvar isNode = typeof self === 'undefined' && typeof process !== 'undefined' && ({}).toString.call(process) === '[object process]';\n\n// test for web worker but not in IE10\nvar isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';\n\n// node\nfunction useNextTick() {\n  // node version 0.10.x displays a deprecation warning when nextTick is used recursively\n  // see https://github.com/cujojs/when/issues/410 for details\n  return function () {\n    return process.nextTick(flush);\n  };\n}\n\n// vertx\nfunction useVertxTimer() {\n  if (typeof vertxNext !== 'undefined') {\n    return function () {\n      vertxNext(flush);\n    };\n  }\n\n  return useSetTimeout();\n}\n\nfunction useMutationObserver() {\n  var iterations = 0;\n  var observer = new BrowserMutationObserver(flush);\n  var node = document.createTextNode('');\n  observer.observe(node, { characterData: true });\n\n  return function () {\n    node.data = iterations = ++iterations % 2;\n  };\n}\n\n// web worker\nfunction useMessageChannel() {\n  var channel = new MessageChannel();\n  channel.port1.onmessage = flush;\n  return function () {\n    return channel.port2.postMessage(0);\n  };\n}\n\nfunction useSetTimeout() {\n  // Store setTimeout reference so es6-promise will be unaffected by\n  // other code modifying setTimeout (like sinon.useFakeTimers())\n  var globalSetTimeout = setTimeout;\n  return function () {\n    return globalSetTimeout(flush, 1);\n  };\n}\n\nvar queue = new Array(1000);\nfunction flush() {\n  for (var i = 0; i < len; i += 2) {\n    var callback = queue[i];\n    var arg = queue[i + 1];\n\n    callback(arg);\n\n    queue[i] = undefined;\n    queue[i + 1] = undefined;\n  }\n\n  len = 0;\n}\n\nfunction attemptVertx() {\n  try {\n    var r = require;\n    var vertx = r('vertx');\n    vertxNext = vertx.runOnLoop || vertx.runOnContext;\n    return useVertxTimer();\n  } catch (e) {\n    return useSetTimeout();\n  }\n}\n\nvar scheduleFlush = undefined;\n// Decide what async method to use to triggering processing of queued callbacks:\nif (isNode) {\n  scheduleFlush = useNextTick();\n} else if (BrowserMutationObserver) {\n  scheduleFlush = useMutationObserver();\n} else if (isWorker) {\n  scheduleFlush = useMessageChannel();\n} else if (browserWindow === undefined && typeof require === 'function') {\n  scheduleFlush = attemptVertx();\n} else {\n  scheduleFlush = useSetTimeout();\n}\n\nfunction then(onFulfillment, onRejection) {\n  var _arguments = arguments;\n\n  var parent = this;\n\n  var child = new this.constructor(noop);\n\n  if (child[PROMISE_ID] === undefined) {\n    makePromise(child);\n  }\n\n  var _state = parent._state;\n\n  if (_state) {\n    (function () {\n      var callback = _arguments[_state - 1];\n      asap(function () {\n        return invokeCallback(_state, child, callback, parent._result);\n      });\n    })();\n  } else {\n    subscribe(parent, child, onFulfillment, onRejection);\n  }\n\n  return child;\n}\n\n/**\n  `Promise.resolve` returns a promise that will become resolved with the\n  passed `value`. It is shorthand for the following:\n\n  ```javascript\n  let promise = new Promise(function(resolve, reject){\n    resolve(1);\n  });\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = Promise.resolve(1);\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  @method resolve\n  @static\n  @param {Any} value value that the returned promise will be resolved with\n  Useful for tooling.\n  @return {Promise} a promise that will become fulfilled with the given\n  `value`\n*/\nfunction resolve(object) {\n  /*jshint validthis:true */\n  var Constructor = this;\n\n  if (object && typeof object === 'object' && object.constructor === Constructor) {\n    return object;\n  }\n\n  var promise = new Constructor(noop);\n  _resolve(promise, object);\n  return promise;\n}\n\nvar PROMISE_ID = Math.random().toString(36).substring(16);\n\nfunction noop() {}\n\nvar PENDING = void 0;\nvar FULFILLED = 1;\nvar REJECTED = 2;\n\nvar GET_THEN_ERROR = new ErrorObject();\n\nfunction selfFulfillment() {\n  return new TypeError(\"You cannot resolve a promise with itself\");\n}\n\nfunction cannotReturnOwn() {\n  return new TypeError('A promises callback cannot return that same promise.');\n}\n\nfunction getThen(promise) {\n  try {\n    return promise.then;\n  } catch (error) {\n    GET_THEN_ERROR.error = error;\n    return GET_THEN_ERROR;\n  }\n}\n\nfunction tryThen(then, value, fulfillmentHandler, rejectionHandler) {\n  try {\n    then.call(value, fulfillmentHandler, rejectionHandler);\n  } catch (e) {\n    return e;\n  }\n}\n\nfunction handleForeignThenable(promise, thenable, then) {\n  asap(function (promise) {\n    var sealed = false;\n    var error = tryThen(then, thenable, function (value) {\n      if (sealed) {\n        return;\n      }\n      sealed = true;\n      if (thenable !== value) {\n        _resolve(promise, value);\n      } else {\n        fulfill(promise, value);\n      }\n    }, function (reason) {\n      if (sealed) {\n        return;\n      }\n      sealed = true;\n\n      _reject(promise, reason);\n    }, 'Settle: ' + (promise._label || ' unknown promise'));\n\n    if (!sealed && error) {\n      sealed = true;\n      _reject(promise, error);\n    }\n  }, promise);\n}\n\nfunction handleOwnThenable(promise, thenable) {\n  if (thenable._state === FULFILLED) {\n    fulfill(promise, thenable._result);\n  } else if (thenable._state === REJECTED) {\n    _reject(promise, thenable._result);\n  } else {\n    subscribe(thenable, undefined, function (value) {\n      return _resolve(promise, value);\n    }, function (reason) {\n      return _reject(promise, reason);\n    });\n  }\n}\n\nfunction handleMaybeThenable(promise, maybeThenable, then$$) {\n  if (maybeThenable.constructor === promise.constructor && then$$ === then && maybeThenable.constructor.resolve === resolve) {\n    handleOwnThenable(promise, maybeThenable);\n  } else {\n    if (then$$ === GET_THEN_ERROR) {\n      _reject(promise, GET_THEN_ERROR.error);\n      GET_THEN_ERROR.error = null;\n    } else if (then$$ === undefined) {\n      fulfill(promise, maybeThenable);\n    } else if (isFunction(then$$)) {\n      handleForeignThenable(promise, maybeThenable, then$$);\n    } else {\n      fulfill(promise, maybeThenable);\n    }\n  }\n}\n\nfunction _resolve(promise, value) {\n  if (promise === value) {\n    _reject(promise, selfFulfillment());\n  } else if (objectOrFunction(value)) {\n    handleMaybeThenable(promise, value, getThen(value));\n  } else {\n    fulfill(promise, value);\n  }\n}\n\nfunction publishRejection(promise) {\n  if (promise._onerror) {\n    promise._onerror(promise._result);\n  }\n\n  publish(promise);\n}\n\nfunction fulfill(promise, value) {\n  if (promise._state !== PENDING) {\n    return;\n  }\n\n  promise._result = value;\n  promise._state = FULFILLED;\n\n  if (promise._subscribers.length !== 0) {\n    asap(publish, promise);\n  }\n}\n\nfunction _reject(promise, reason) {\n  if (promise._state !== PENDING) {\n    return;\n  }\n  promise._state = REJECTED;\n  promise._result = reason;\n\n  asap(publishRejection, promise);\n}\n\nfunction subscribe(parent, child, onFulfillment, onRejection) {\n  var _subscribers = parent._subscribers;\n  var length = _subscribers.length;\n\n  parent._onerror = null;\n\n  _subscribers[length] = child;\n  _subscribers[length + FULFILLED] = onFulfillment;\n  _subscribers[length + REJECTED] = onRejection;\n\n  if (length === 0 && parent._state) {\n    asap(publish, parent);\n  }\n}\n\nfunction publish(promise) {\n  var subscribers = promise._subscribers;\n  var settled = promise._state;\n\n  if (subscribers.length === 0) {\n    return;\n  }\n\n  var child = undefined,\n      callback = undefined,\n      detail = promise._result;\n\n  for (var i = 0; i < subscribers.length; i += 3) {\n    child = subscribers[i];\n    callback = subscribers[i + settled];\n\n    if (child) {\n      invokeCallback(settled, child, callback, detail);\n    } else {\n      callback(detail);\n    }\n  }\n\n  promise._subscribers.length = 0;\n}\n\nfunction ErrorObject() {\n  this.error = null;\n}\n\nvar TRY_CATCH_ERROR = new ErrorObject();\n\nfunction tryCatch(callback, detail) {\n  try {\n    return callback(detail);\n  } catch (e) {\n    TRY_CATCH_ERROR.error = e;\n    return TRY_CATCH_ERROR;\n  }\n}\n\nfunction invokeCallback(settled, promise, callback, detail) {\n  var hasCallback = isFunction(callback),\n      value = undefined,\n      error = undefined,\n      succeeded = undefined,\n      failed = undefined;\n\n  if (hasCallback) {\n    value = tryCatch(callback, detail);\n\n    if (value === TRY_CATCH_ERROR) {\n      failed = true;\n      error = value.error;\n      value.error = null;\n    } else {\n      succeeded = true;\n    }\n\n    if (promise === value) {\n      _reject(promise, cannotReturnOwn());\n      return;\n    }\n  } else {\n    value = detail;\n    succeeded = true;\n  }\n\n  if (promise._state !== PENDING) {\n    // noop\n  } else if (hasCallback && succeeded) {\n      _resolve(promise, value);\n    } else if (failed) {\n      _reject(promise, error);\n    } else if (settled === FULFILLED) {\n      fulfill(promise, value);\n    } else if (settled === REJECTED) {\n      _reject(promise, value);\n    }\n}\n\nfunction initializePromise(promise, resolver) {\n  try {\n    resolver(function resolvePromise(value) {\n      _resolve(promise, value);\n    }, function rejectPromise(reason) {\n      _reject(promise, reason);\n    });\n  } catch (e) {\n    _reject(promise, e);\n  }\n}\n\nvar id = 0;\nfunction nextId() {\n  return id++;\n}\n\nfunction makePromise(promise) {\n  promise[PROMISE_ID] = id++;\n  promise._state = undefined;\n  promise._result = undefined;\n  promise._subscribers = [];\n}\n\nfunction Enumerator(Constructor, input) {\n  this._instanceConstructor = Constructor;\n  this.promise = new Constructor(noop);\n\n  if (!this.promise[PROMISE_ID]) {\n    makePromise(this.promise);\n  }\n\n  if (isArray(input)) {\n    this._input = input;\n    this.length = input.length;\n    this._remaining = input.length;\n\n    this._result = new Array(this.length);\n\n    if (this.length === 0) {\n      fulfill(this.promise, this._result);\n    } else {\n      this.length = this.length || 0;\n      this._enumerate();\n      if (this._remaining === 0) {\n        fulfill(this.promise, this._result);\n      }\n    }\n  } else {\n    _reject(this.promise, validationError());\n  }\n}\n\nfunction validationError() {\n  return new Error('Array Methods must be provided an Array');\n};\n\nEnumerator.prototype._enumerate = function () {\n  var length = this.length;\n  var _input = this._input;\n\n  for (var i = 0; this._state === PENDING && i < length; i++) {\n    this._eachEntry(_input[i], i);\n  }\n};\n\nEnumerator.prototype._eachEntry = function (entry, i) {\n  var c = this._instanceConstructor;\n  var resolve$$ = c.resolve;\n\n  if (resolve$$ === resolve) {\n    var _then = getThen(entry);\n\n    if (_then === then && entry._state !== PENDING) {\n      this._settledAt(entry._state, i, entry._result);\n    } else if (typeof _then !== 'function') {\n      this._remaining--;\n      this._result[i] = entry;\n    } else if (c === Promise) {\n      var promise = new c(noop);\n      handleMaybeThenable(promise, entry, _then);\n      this._willSettleAt(promise, i);\n    } else {\n      this._willSettleAt(new c(function (resolve$$) {\n        return resolve$$(entry);\n      }), i);\n    }\n  } else {\n    this._willSettleAt(resolve$$(entry), i);\n  }\n};\n\nEnumerator.prototype._settledAt = function (state, i, value) {\n  var promise = this.promise;\n\n  if (promise._state === PENDING) {\n    this._remaining--;\n\n    if (state === REJECTED) {\n      _reject(promise, value);\n    } else {\n      this._result[i] = value;\n    }\n  }\n\n  if (this._remaining === 0) {\n    fulfill(promise, this._result);\n  }\n};\n\nEnumerator.prototype._willSettleAt = function (promise, i) {\n  var enumerator = this;\n\n  subscribe(promise, undefined, function (value) {\n    return enumerator._settledAt(FULFILLED, i, value);\n  }, function (reason) {\n    return enumerator._settledAt(REJECTED, i, reason);\n  });\n};\n\n/**\n  `Promise.all` accepts an array of promises, and returns a new promise which\n  is fulfilled with an array of fulfillment values for the passed promises, or\n  rejected with the reason of the first passed promise to be rejected. It casts all\n  elements of the passed iterable to promises as it runs this algorithm.\n\n  Example:\n\n  ```javascript\n  let promise1 = resolve(1);\n  let promise2 = resolve(2);\n  let promise3 = resolve(3);\n  let promises = [ promise1, promise2, promise3 ];\n\n  Promise.all(promises).then(function(array){\n    // The array here would be [ 1, 2, 3 ];\n  });\n  ```\n\n  If any of the `promises` given to `all` are rejected, the first promise\n  that is rejected will be given as an argument to the returned promises's\n  rejection handler. For example:\n\n  Example:\n\n  ```javascript\n  let promise1 = resolve(1);\n  let promise2 = reject(new Error(\"2\"));\n  let promise3 = reject(new Error(\"3\"));\n  let promises = [ promise1, promise2, promise3 ];\n\n  Promise.all(promises).then(function(array){\n    // Code here never runs because there are rejected promises!\n  }, function(error) {\n    // error.message === \"2\"\n  });\n  ```\n\n  @method all\n  @static\n  @param {Array} entries array of promises\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled when all `promises` have been\n  fulfilled, or rejected if any of them become rejected.\n  @static\n*/\nfunction all(entries) {\n  return new Enumerator(this, entries).promise;\n}\n\n/**\n  `Promise.race` returns a new promise which is settled in the same way as the\n  first passed promise to settle.\n\n  Example:\n\n  ```javascript\n  let promise1 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 2');\n    }, 100);\n  });\n\n  Promise.race([promise1, promise2]).then(function(result){\n    // result === 'promise 2' because it was resolved before promise1\n    // was resolved.\n  });\n  ```\n\n  `Promise.race` is deterministic in that only the state of the first\n  settled promise matters. For example, even if other promises given to the\n  `promises` array argument are resolved, but the first settled promise has\n  become rejected before the other promises became fulfilled, the returned\n  promise will become rejected:\n\n  ```javascript\n  let promise1 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      reject(new Error('promise 2'));\n    }, 100);\n  });\n\n  Promise.race([promise1, promise2]).then(function(result){\n    // Code here never runs\n  }, function(reason){\n    // reason.message === 'promise 2' because promise 2 became rejected before\n    // promise 1 became fulfilled\n  });\n  ```\n\n  An example real-world use case is implementing timeouts:\n\n  ```javascript\n  Promise.race([ajax('foo.json'), timeout(5000)])\n  ```\n\n  @method race\n  @static\n  @param {Array} promises array of promises to observe\n  Useful for tooling.\n  @return {Promise} a promise which settles in the same way as the first passed\n  promise to settle.\n*/\nfunction race(entries) {\n  /*jshint validthis:true */\n  var Constructor = this;\n\n  if (!isArray(entries)) {\n    return new Constructor(function (_, reject) {\n      return reject(new TypeError('You must pass an array to race.'));\n    });\n  } else {\n    return new Constructor(function (resolve, reject) {\n      var length = entries.length;\n      for (var i = 0; i < length; i++) {\n        Constructor.resolve(entries[i]).then(resolve, reject);\n      }\n    });\n  }\n}\n\n/**\n  `Promise.reject` returns a promise rejected with the passed `reason`.\n  It is shorthand for the following:\n\n  ```javascript\n  let promise = new Promise(function(resolve, reject){\n    reject(new Error('WHOOPS'));\n  });\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = Promise.reject(new Error('WHOOPS'));\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  @method reject\n  @static\n  @param {Any} reason value that the returned promise will be rejected with.\n  Useful for tooling.\n  @return {Promise} a promise rejected with the given `reason`.\n*/\nfunction reject(reason) {\n  /*jshint validthis:true */\n  var Constructor = this;\n  var promise = new Constructor(noop);\n  _reject(promise, reason);\n  return promise;\n}\n\nfunction needsResolver() {\n  throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');\n}\n\nfunction needsNew() {\n  throw new TypeError(\"Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.\");\n}\n\n/**\n  Promise objects represent the eventual result of an asynchronous operation. The\n  primary way of interacting with a promise is through its `then` method, which\n  registers callbacks to receive either a promise's eventual value or the reason\n  why the promise cannot be fulfilled.\n\n  Terminology\n  -----------\n\n  - `promise` is an object or function with a `then` method whose behavior conforms to this specification.\n  - `thenable` is an object or function that defines a `then` method.\n  - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).\n  - `exception` is a value that is thrown using the throw statement.\n  - `reason` is a value that indicates why a promise was rejected.\n  - `settled` the final resting state of a promise, fulfilled or rejected.\n\n  A promise can be in one of three states: pending, fulfilled, or rejected.\n\n  Promises that are fulfilled have a fulfillment value and are in the fulfilled\n  state.  Promises that are rejected have a rejection reason and are in the\n  rejected state.  A fulfillment value is never a thenable.\n\n  Promises can also be said to *resolve* a value.  If this value is also a\n  promise, then the original promise's settled state will match the value's\n  settled state.  So a promise that *resolves* a promise that rejects will\n  itself reject, and a promise that *resolves* a promise that fulfills will\n  itself fulfill.\n\n\n  Basic Usage:\n  ------------\n\n  ```js\n  let promise = new Promise(function(resolve, reject) {\n    // on success\n    resolve(value);\n\n    // on failure\n    reject(reason);\n  });\n\n  promise.then(function(value) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Advanced Usage:\n  ---------------\n\n  Promises shine when abstracting away asynchronous interactions such as\n  `XMLHttpRequest`s.\n\n  ```js\n  function getJSON(url) {\n    return new Promise(function(resolve, reject){\n      let xhr = new XMLHttpRequest();\n\n      xhr.open('GET', url);\n      xhr.onreadystatechange = handler;\n      xhr.responseType = 'json';\n      xhr.setRequestHeader('Accept', 'application/json');\n      xhr.send();\n\n      function handler() {\n        if (this.readyState === this.DONE) {\n          if (this.status === 200) {\n            resolve(this.response);\n          } else {\n            reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));\n          }\n        }\n      };\n    });\n  }\n\n  getJSON('/posts.json').then(function(json) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Unlike callbacks, promises are great composable primitives.\n\n  ```js\n  Promise.all([\n    getJSON('/posts'),\n    getJSON('/comments')\n  ]).then(function(values){\n    values[0] // => postsJSON\n    values[1] // => commentsJSON\n\n    return values;\n  });\n  ```\n\n  @class Promise\n  @param {function} resolver\n  Useful for tooling.\n  @constructor\n*/\nfunction Promise(resolver) {\n  this[PROMISE_ID] = nextId();\n  this._result = this._state = undefined;\n  this._subscribers = [];\n\n  if (noop !== resolver) {\n    typeof resolver !== 'function' && needsResolver();\n    this instanceof Promise ? initializePromise(this, resolver) : needsNew();\n  }\n}\n\nPromise.all = all;\nPromise.race = race;\nPromise.resolve = resolve;\nPromise.reject = reject;\nPromise._setScheduler = setScheduler;\nPromise._setAsap = setAsap;\nPromise._asap = asap;\n\nPromise.prototype = {\n  constructor: Promise,\n\n  /**\n    The primary way of interacting with a promise is through its `then` method,\n    which registers callbacks to receive either a promise's eventual value or the\n    reason why the promise cannot be fulfilled.\n  \n    ```js\n    findUser().then(function(user){\n      // user is available\n    }, function(reason){\n      // user is unavailable, and you are given the reason why\n    });\n    ```\n  \n    Chaining\n    --------\n  \n    The return value of `then` is itself a promise.  This second, 'downstream'\n    promise is resolved with the return value of the first promise's fulfillment\n    or rejection handler, or rejected if the handler throws an exception.\n  \n    ```js\n    findUser().then(function (user) {\n      return user.name;\n    }, function (reason) {\n      return 'default name';\n    }).then(function (userName) {\n      // If `findUser` fulfilled, `userName` will be the user's name, otherwise it\n      // will be `'default name'`\n    });\n  \n    findUser().then(function (user) {\n      throw new Error('Found user, but still unhappy');\n    }, function (reason) {\n      throw new Error('`findUser` rejected and we're unhappy');\n    }).then(function (value) {\n      // never reached\n    }, function (reason) {\n      // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.\n      // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.\n    });\n    ```\n    If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.\n  \n    ```js\n    findUser().then(function (user) {\n      throw new PedagogicalException('Upstream error');\n    }).then(function (value) {\n      // never reached\n    }).then(function (value) {\n      // never reached\n    }, function (reason) {\n      // The `PedgagocialException` is propagated all the way down to here\n    });\n    ```\n  \n    Assimilation\n    ------------\n  \n    Sometimes the value you want to propagate to a downstream promise can only be\n    retrieved asynchronously. This can be achieved by returning a promise in the\n    fulfillment or rejection handler. The downstream promise will then be pending\n    until the returned promise is settled. This is called *assimilation*.\n  \n    ```js\n    findUser().then(function (user) {\n      return findCommentsByAuthor(user);\n    }).then(function (comments) {\n      // The user's comments are now available\n    });\n    ```\n  \n    If the assimliated promise rejects, then the downstream promise will also reject.\n  \n    ```js\n    findUser().then(function (user) {\n      return findCommentsByAuthor(user);\n    }).then(function (comments) {\n      // If `findCommentsByAuthor` fulfills, we'll have the value here\n    }, function (reason) {\n      // If `findCommentsByAuthor` rejects, we'll have the reason here\n    });\n    ```\n  \n    Simple Example\n    --------------\n  \n    Synchronous Example\n  \n    ```javascript\n    let result;\n  \n    try {\n      result = findResult();\n      // success\n    } catch(reason) {\n      // failure\n    }\n    ```\n  \n    Errback Example\n  \n    ```js\n    findResult(function(result, err){\n      if (err) {\n        // failure\n      } else {\n        // success\n      }\n    });\n    ```\n  \n    Promise Example;\n  \n    ```javascript\n    findResult().then(function(result){\n      // success\n    }, function(reason){\n      // failure\n    });\n    ```\n  \n    Advanced Example\n    --------------\n  \n    Synchronous Example\n  \n    ```javascript\n    let author, books;\n  \n    try {\n      author = findAuthor();\n      books  = findBooksByAuthor(author);\n      // success\n    } catch(reason) {\n      // failure\n    }\n    ```\n  \n    Errback Example\n  \n    ```js\n  \n    function foundBooks(books) {\n  \n    }\n  \n    function failure(reason) {\n  \n    }\n  \n    findAuthor(function(author, err){\n      if (err) {\n        failure(err);\n        // failure\n      } else {\n        try {\n          findBoooksByAuthor(author, function(books, err) {\n            if (err) {\n              failure(err);\n            } else {\n              try {\n                foundBooks(books);\n              } catch(reason) {\n                failure(reason);\n              }\n            }\n          });\n        } catch(error) {\n          failure(err);\n        }\n        // success\n      }\n    });\n    ```\n  \n    Promise Example;\n  \n    ```javascript\n    findAuthor().\n      then(findBooksByAuthor).\n      then(function(books){\n        // found books\n    }).catch(function(reason){\n      // something went wrong\n    });\n    ```\n  \n    @method then\n    @param {Function} onFulfilled\n    @param {Function} onRejected\n    Useful for tooling.\n    @return {Promise}\n  */\n  then: then,\n\n  /**\n    `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same\n    as the catch block of a try/catch statement.\n  \n    ```js\n    function findAuthor(){\n      throw new Error('couldn't find that author');\n    }\n  \n    // synchronous\n    try {\n      findAuthor();\n    } catch(reason) {\n      // something went wrong\n    }\n  \n    // async with promises\n    findAuthor().catch(function(reason){\n      // something went wrong\n    });\n    ```\n  \n    @method catch\n    @param {Function} onRejection\n    Useful for tooling.\n    @return {Promise}\n  */\n  'catch': function _catch(onRejection) {\n    return this.then(null, onRejection);\n  }\n};\n\nfunction polyfill() {\n    var local = undefined;\n\n    if (typeof global !== 'undefined') {\n        local = global;\n    } else if (typeof self !== 'undefined') {\n        local = self;\n    } else {\n        try {\n            local = Function('return this')();\n        } catch (e) {\n            throw new Error('polyfill failed because global object is unavailable in this environment');\n        }\n    }\n\n    var P = local.Promise;\n\n    if (P) {\n        var promiseToString = null;\n        try {\n            promiseToString = Object.prototype.toString.call(P.resolve());\n        } catch (e) {\n            // silently ignored\n        }\n\n        if (promiseToString === '[object Promise]' && !P.cast) {\n            return;\n        }\n    }\n\n    local.Promise = Promise;\n}\n\n// Strange compat..\nPromise.polyfill = polyfill;\nPromise.Promise = Promise;\n\nreturn Promise;\n\n})));\n//# sourceMappingURL=es6-promise.map\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}